<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/event_tickets/production.proto

namespace Event_tickets;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>event_tickets.Production</code>
 */
class Production extends \Google\Protobuf\Internal\Message
{
    /**
     * PassKit generated production id (22 characters).
     *
     * Generated from protobuf field <code>string id = 1 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     */
    protected $id = '';
    /**
     * User generated production id; unique within the account.
     *
     * Generated from protobuf field <code>string uid = 2;</code>
     */
    protected $uid = '';
    /**
     * Name of the production (i.e. Les Miserables, The Lion King, Avengers, etc).
     *
     * Generated from protobuf field <code>string name = 3;</code>
     */
    protected $name = '';
    /**
     * Localized name of the production.
     *
     * Generated from protobuf field <code>.io.LocalizedString localizedName = 4;</code>
     */
    protected $localizedName = null;
    /**
     * Fine print: terms & conditions for the production.
     *
     * Generated from protobuf field <code>string finePrint = 5;</code>
     */
    protected $finePrint = '';
    /**
     * Localized fine print of the production.
     *
     * Generated from protobuf field <code>.io.LocalizedString localizedFinePrint = 6;</code>
     */
    protected $localizedFinePrint = null;
    /**
     * If set will automatically delete the ticket and invalidate the pass in our system upon ticket redemption. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponRedemption = 7;</code>
     */
    protected $autoInvalidateTicketsUponRedemption = 0;
    /**
     * If set will automatically delete the ticket and invalidate the pass in our system 1 day after the event end date (if set). If event date is not set, it will expire 1 day after event start date. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponEventEnd = 8;</code>
     */
    protected $autoInvalidateTicketsUponEventEnd = 0;
    /**
     * If set will automatically delete the ticket and invalidate the pass in our system upon ticket expiry. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponExpiry = 9;</code>
     */
    protected $autoInvalidateTicketsUponExpiry = 0;
    /**
     * The events status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.
     *
     * Generated from protobuf field <code>repeated .io.ProjectStatus status = 10;</code>
     */
    private $status;
    /**
     * Leave empty for draft production. Needs to be set for productions where status contains PROJECT_PUBLISHED.
     *
     * Generated from protobuf field <code>string passTypeIdentifier = 11;</code>
     */
    protected $passTypeIdentifier = '';
    /**
     * Contains the email & sms distribution settings for the production.
     *
     * Generated from protobuf field <code>.io.DistributionSettings distributionSettings = 12;</code>
     */
    protected $distributionSettings = null;
    /**
     * The date the event was created. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 13 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     */
    protected $created = null;
    /**
     * The date the event updated. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 14 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     */
    protected $updated = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           PassKit generated production id (22 characters).
     *     @type string $uid
     *           User generated production id; unique within the account.
     *     @type string $name
     *           Name of the production (i.e. Les Miserables, The Lion King, Avengers, etc).
     *     @type \Io\LocalizedString $localizedName
     *           Localized name of the production.
     *     @type string $finePrint
     *           Fine print: terms & conditions for the production.
     *     @type \Io\LocalizedString $localizedFinePrint
     *           Localized fine print of the production.
     *     @type int $autoInvalidateTicketsUponRedemption
     *           If set will automatically delete the ticket and invalidate the pass in our system upon ticket redemption. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *     @type int $autoInvalidateTicketsUponEventEnd
     *           If set will automatically delete the ticket and invalidate the pass in our system 1 day after the event end date (if set). If event date is not set, it will expire 1 day after event start date. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *     @type int $autoInvalidateTicketsUponExpiry
     *           If set will automatically delete the ticket and invalidate the pass in our system upon ticket expiry. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *     @type int[]|\Google\Protobuf\Internal\RepeatedField $status
     *           The events status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.
     *     @type string $passTypeIdentifier
     *           Leave empty for draft production. Needs to be set for productions where status contains PROJECT_PUBLISHED.
     *     @type \Io\DistributionSettings $distributionSettings
     *           Contains the email & sms distribution settings for the production.
     *     @type \Google\Protobuf\Timestamp $created
     *           The date the event was created. Not writable.
     *     @type \Google\Protobuf\Timestamp $updated
     *           The date the event updated. Not writable.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\EventTickets\Production::initOnce();
        parent::__construct($data);
    }

    /**
     * PassKit generated production id (22 characters).
     *
     * Generated from protobuf field <code>string id = 1 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * PassKit generated production id (22 characters).
     *
     * Generated from protobuf field <code>string id = 1 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * User generated production id; unique within the account.
     *
     * Generated from protobuf field <code>string uid = 2;</code>
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }

    /**
     * User generated production id; unique within the account.
     *
     * Generated from protobuf field <code>string uid = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->uid = $var;

        return $this;
    }

    /**
     * Name of the production (i.e. Les Miserables, The Lion King, Avengers, etc).
     *
     * Generated from protobuf field <code>string name = 3;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Name of the production (i.e. Les Miserables, The Lion King, Avengers, etc).
     *
     * Generated from protobuf field <code>string name = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Localized name of the production.
     *
     * Generated from protobuf field <code>.io.LocalizedString localizedName = 4;</code>
     * @return \Io\LocalizedString
     */
    public function getLocalizedName()
    {
        return isset($this->localizedName) ? $this->localizedName : null;
    }

    public function hasLocalizedName()
    {
        return isset($this->localizedName);
    }

    public function clearLocalizedName()
    {
        unset($this->localizedName);
    }

    /**
     * Localized name of the production.
     *
     * Generated from protobuf field <code>.io.LocalizedString localizedName = 4;</code>
     * @param \Io\LocalizedString $var
     * @return $this
     */
    public function setLocalizedName($var)
    {
        GPBUtil::checkMessage($var, \Io\LocalizedString::class);
        $this->localizedName = $var;

        return $this;
    }

    /**
     * Fine print: terms & conditions for the production.
     *
     * Generated from protobuf field <code>string finePrint = 5;</code>
     * @return string
     */
    public function getFinePrint()
    {
        return $this->finePrint;
    }

    /**
     * Fine print: terms & conditions for the production.
     *
     * Generated from protobuf field <code>string finePrint = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setFinePrint($var)
    {
        GPBUtil::checkString($var, True);
        $this->finePrint = $var;

        return $this;
    }

    /**
     * Localized fine print of the production.
     *
     * Generated from protobuf field <code>.io.LocalizedString localizedFinePrint = 6;</code>
     * @return \Io\LocalizedString
     */
    public function getLocalizedFinePrint()
    {
        return isset($this->localizedFinePrint) ? $this->localizedFinePrint : null;
    }

    public function hasLocalizedFinePrint()
    {
        return isset($this->localizedFinePrint);
    }

    public function clearLocalizedFinePrint()
    {
        unset($this->localizedFinePrint);
    }

    /**
     * Localized fine print of the production.
     *
     * Generated from protobuf field <code>.io.LocalizedString localizedFinePrint = 6;</code>
     * @param \Io\LocalizedString $var
     * @return $this
     */
    public function setLocalizedFinePrint($var)
    {
        GPBUtil::checkMessage($var, \Io\LocalizedString::class);
        $this->localizedFinePrint = $var;

        return $this;
    }

    /**
     * If set will automatically delete the ticket and invalidate the pass in our system upon ticket redemption. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponRedemption = 7;</code>
     * @return int
     */
    public function getAutoInvalidateTicketsUponRedemption()
    {
        return $this->autoInvalidateTicketsUponRedemption;
    }

    /**
     * If set will automatically delete the ticket and invalidate the pass in our system upon ticket redemption. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponRedemption = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setAutoInvalidateTicketsUponRedemption($var)
    {
        GPBUtil::checkEnum($var, \Io\Toggle::class);
        $this->autoInvalidateTicketsUponRedemption = $var;

        return $this;
    }

    /**
     * If set will automatically delete the ticket and invalidate the pass in our system 1 day after the event end date (if set). If event date is not set, it will expire 1 day after event start date. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponEventEnd = 8;</code>
     * @return int
     */
    public function getAutoInvalidateTicketsUponEventEnd()
    {
        return $this->autoInvalidateTicketsUponEventEnd;
    }

    /**
     * If set will automatically delete the ticket and invalidate the pass in our system 1 day after the event end date (if set). If event date is not set, it will expire 1 day after event start date. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponEventEnd = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setAutoInvalidateTicketsUponEventEnd($var)
    {
        GPBUtil::checkEnum($var, \Io\Toggle::class);
        $this->autoInvalidateTicketsUponEventEnd = $var;

        return $this;
    }

    /**
     * If set will automatically delete the ticket and invalidate the pass in our system upon ticket expiry. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponExpiry = 9;</code>
     * @return int
     */
    public function getAutoInvalidateTicketsUponExpiry()
    {
        return $this->autoInvalidateTicketsUponExpiry;
    }

    /**
     * If set will automatically delete the ticket and invalidate the pass in our system upon ticket expiry. If not set, the tickets will expire 90 days after issue. If the ticket is not auto invalidated it can be used for further engagement.
     *
     * Generated from protobuf field <code>.io.Toggle autoInvalidateTicketsUponExpiry = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setAutoInvalidateTicketsUponExpiry($var)
    {
        GPBUtil::checkEnum($var, \Io\Toggle::class);
        $this->autoInvalidateTicketsUponExpiry = $var;

        return $this;
    }

    /**
     * The events status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.
     *
     * Generated from protobuf field <code>repeated .io.ProjectStatus status = 10;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * The events status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.
     *
     * Generated from protobuf field <code>repeated .io.ProjectStatus status = 10;</code>
     * @param int[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setStatus($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::ENUM, \Io\ProjectStatus::class);
        $this->status = $arr;

        return $this;
    }

    /**
     * Leave empty for draft production. Needs to be set for productions where status contains PROJECT_PUBLISHED.
     *
     * Generated from protobuf field <code>string passTypeIdentifier = 11;</code>
     * @return string
     */
    public function getPassTypeIdentifier()
    {
        return $this->passTypeIdentifier;
    }

    /**
     * Leave empty for draft production. Needs to be set for productions where status contains PROJECT_PUBLISHED.
     *
     * Generated from protobuf field <code>string passTypeIdentifier = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setPassTypeIdentifier($var)
    {
        GPBUtil::checkString($var, True);
        $this->passTypeIdentifier = $var;

        return $this;
    }

    /**
     * Contains the email & sms distribution settings for the production.
     *
     * Generated from protobuf field <code>.io.DistributionSettings distributionSettings = 12;</code>
     * @return \Io\DistributionSettings
     */
    public function getDistributionSettings()
    {
        return isset($this->distributionSettings) ? $this->distributionSettings : null;
    }

    public function hasDistributionSettings()
    {
        return isset($this->distributionSettings);
    }

    public function clearDistributionSettings()
    {
        unset($this->distributionSettings);
    }

    /**
     * Contains the email & sms distribution settings for the production.
     *
     * Generated from protobuf field <code>.io.DistributionSettings distributionSettings = 12;</code>
     * @param \Io\DistributionSettings $var
     * @return $this
     */
    public function setDistributionSettings($var)
    {
        GPBUtil::checkMessage($var, \Io\DistributionSettings::class);
        $this->distributionSettings = $var;

        return $this;
    }

    /**
     * The date the event was created. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 13 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getCreated()
    {
        return isset($this->created) ? $this->created : null;
    }

    public function hasCreated()
    {
        return isset($this->created);
    }

    public function clearCreated()
    {
        unset($this->created);
    }

    /**
     * The date the event was created. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 13 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreated($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created = $var;

        return $this;
    }

    /**
     * The date the event updated. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 14 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getUpdated()
    {
        return isset($this->updated) ? $this->updated : null;
    }

    public function hasUpdated()
    {
        return isset($this->updated);
    }

    public function clearUpdated()
    {
        unset($this->updated);
    }

    /**
     * The date the event updated. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 14 [(.grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setUpdated($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->updated = $var;

        return $this;
    }

}

