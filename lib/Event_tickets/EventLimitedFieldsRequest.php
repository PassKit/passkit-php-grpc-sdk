<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/event_tickets/event.proto

namespace Event_tickets;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>event_tickets.EventLimitedFieldsRequest</code>
 */
class EventLimitedFieldsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * PassKit generated production id (22 characters).
     *
     * Generated from protobuf field <code>string productionId = 1;</code>
     */
    protected $productionId = '';
    /**
     * PassKit generated venue id (22 characters).
     *
     * Generated from protobuf field <code>string venueId = 2;</code>
     */
    protected $venueId = '';
    /**
     * The date/time when the doors open at the venue.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp doorsOpen = 3;</code>
     */
    protected $doorsOpen = null;
    /**
     * The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp scheduledStartDate = 4;</code>
     */
    protected $scheduledStartDate = null;
    /**
     * The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp actualStartDate = 5;</code>
     */
    protected $actualStartDate = null;
    /**
     * The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp endDate = 6;</code>
     */
    protected $endDate = null;
    /**
     * Optional relevant date for when the event starts. Used by Apple Wallet to trigger a lock-screen notification that there is an event coming up. Google Pay will always notify the user 3 hours before the event start date that they have an upcoming event.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp relevantDate = 7;</code>
     */
    protected $relevantDate = null;
    /**
     * The quota for the event. If set to 0, then it is unlimited. If the quota is reached no new tickets can be issued.
     *
     * Generated from protobuf field <code>.io.Quota quota = 8;</code>
     */
    protected $quota = null;
    /**
     * Performance analytics for the event. Not writable.
     *
     * Generated from protobuf field <code>.io.Metrics metrics = 9;</code>
     */
    protected $metrics = null;
    /**
     * The date the event was created. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 10;</code>
     */
    protected $created = null;
    /**
     * The date the event updated. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 11;</code>
     */
    protected $updated = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $productionId
     *           PassKit generated production id (22 characters).
     *     @type string $venueId
     *           PassKit generated venue id (22 characters).
     *     @type \Google\Protobuf\Timestamp $doorsOpen
     *           The date/time when the doors open at the venue.
     *     @type \Google\Protobuf\Timestamp $scheduledStartDate
     *           The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
     *     @type \Google\Protobuf\Timestamp $actualStartDate
     *           The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
     *     @type \Google\Protobuf\Timestamp $endDate
     *           The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
     *     @type \Google\Protobuf\Timestamp $relevantDate
     *           Optional relevant date for when the event starts. Used by Apple Wallet to trigger a lock-screen notification that there is an event coming up. Google Pay will always notify the user 3 hours before the event start date that they have an upcoming event.
     *     @type \Io\Quota $quota
     *           The quota for the event. If set to 0, then it is unlimited. If the quota is reached no new tickets can be issued.
     *     @type \Io\Metrics $metrics
     *           Performance analytics for the event. Not writable.
     *     @type \Google\Protobuf\Timestamp $created
     *           The date the event was created. Not writable.
     *     @type \Google\Protobuf\Timestamp $updated
     *           The date the event updated. Not writable.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\EventTickets\Event::initOnce();
        parent::__construct($data);
    }

    /**
     * PassKit generated production id (22 characters).
     *
     * Generated from protobuf field <code>string productionId = 1;</code>
     * @return string
     */
    public function getProductionId()
    {
        return $this->productionId;
    }

    /**
     * PassKit generated production id (22 characters).
     *
     * Generated from protobuf field <code>string productionId = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setProductionId($var)
    {
        GPBUtil::checkString($var, True);
        $this->productionId = $var;

        return $this;
    }

    /**
     * PassKit generated venue id (22 characters).
     *
     * Generated from protobuf field <code>string venueId = 2;</code>
     * @return string
     */
    public function getVenueId()
    {
        return $this->venueId;
    }

    /**
     * PassKit generated venue id (22 characters).
     *
     * Generated from protobuf field <code>string venueId = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setVenueId($var)
    {
        GPBUtil::checkString($var, True);
        $this->venueId = $var;

        return $this;
    }

    /**
     * The date/time when the doors open at the venue.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp doorsOpen = 3;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getDoorsOpen()
    {
        return isset($this->doorsOpen) ? $this->doorsOpen : null;
    }

    public function hasDoorsOpen()
    {
        return isset($this->doorsOpen);
    }

    public function clearDoorsOpen()
    {
        unset($this->doorsOpen);
    }

    /**
     * The date/time when the doors open at the venue.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp doorsOpen = 3;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setDoorsOpen($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->doorsOpen = $var;

        return $this;
    }

    /**
     * The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp scheduledStartDate = 4;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getScheduledStartDate()
    {
        return isset($this->scheduledStartDate) ? $this->scheduledStartDate : null;
    }

    public function hasScheduledStartDate()
    {
        return isset($this->scheduledStartDate);
    }

    public function clearScheduledStartDate()
    {
        unset($this->scheduledStartDate);
    }

    /**
     * The scheduled date/time when the event starts. If the event spans multiple days, it should be the start date/time on the first day. Tickets can only be issued for events that are within 90 days of the ticket issue date.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp scheduledStartDate = 4;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setScheduledStartDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->scheduledStartDate = $var;

        return $this;
    }

    /**
     * The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp actualStartDate = 5;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getActualStartDate()
    {
        return isset($this->actualStartDate) ? $this->actualStartDate : null;
    }

    public function hasActualStartDate()
    {
        return isset($this->actualStartDate);
    }

    public function clearActualStartDate()
    {
        unset($this->actualStartDate);
    }

    /**
     * The new date/time when the event starts. This field can be used when you need to set a new event start data/time.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp actualStartDate = 5;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setActualStartDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->actualStartDate = $var;

        return $this;
    }

    /**
     * The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp endDate = 6;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getEndDate()
    {
        return isset($this->endDate) ? $this->endDate : null;
    }

    public function hasEndDate()
    {
        return isset($this->endDate);
    }

    public function clearEndDate()
    {
        unset($this->endDate);
    }

    /**
     * The date/time when the event ends. If the event spans multiple days, it should be the end date/time on the last day.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp endDate = 6;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setEndDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->endDate = $var;

        return $this;
    }

    /**
     * Optional relevant date for when the event starts. Used by Apple Wallet to trigger a lock-screen notification that there is an event coming up. Google Pay will always notify the user 3 hours before the event start date that they have an upcoming event.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp relevantDate = 7;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getRelevantDate()
    {
        return isset($this->relevantDate) ? $this->relevantDate : null;
    }

    public function hasRelevantDate()
    {
        return isset($this->relevantDate);
    }

    public function clearRelevantDate()
    {
        unset($this->relevantDate);
    }

    /**
     * Optional relevant date for when the event starts. Used by Apple Wallet to trigger a lock-screen notification that there is an event coming up. Google Pay will always notify the user 3 hours before the event start date that they have an upcoming event.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp relevantDate = 7;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setRelevantDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->relevantDate = $var;

        return $this;
    }

    /**
     * The quota for the event. If set to 0, then it is unlimited. If the quota is reached no new tickets can be issued.
     *
     * Generated from protobuf field <code>.io.Quota quota = 8;</code>
     * @return \Io\Quota|null
     */
    public function getQuota()
    {
        return isset($this->quota) ? $this->quota : null;
    }

    public function hasQuota()
    {
        return isset($this->quota);
    }

    public function clearQuota()
    {
        unset($this->quota);
    }

    /**
     * The quota for the event. If set to 0, then it is unlimited. If the quota is reached no new tickets can be issued.
     *
     * Generated from protobuf field <code>.io.Quota quota = 8;</code>
     * @param \Io\Quota $var
     * @return $this
     */
    public function setQuota($var)
    {
        GPBUtil::checkMessage($var, \Io\Quota::class);
        $this->quota = $var;

        return $this;
    }

    /**
     * Performance analytics for the event. Not writable.
     *
     * Generated from protobuf field <code>.io.Metrics metrics = 9;</code>
     * @return \Io\Metrics|null
     */
    public function getMetrics()
    {
        return isset($this->metrics) ? $this->metrics : null;
    }

    public function hasMetrics()
    {
        return isset($this->metrics);
    }

    public function clearMetrics()
    {
        unset($this->metrics);
    }

    /**
     * Performance analytics for the event. Not writable.
     *
     * Generated from protobuf field <code>.io.Metrics metrics = 9;</code>
     * @param \Io\Metrics $var
     * @return $this
     */
    public function setMetrics($var)
    {
        GPBUtil::checkMessage($var, \Io\Metrics::class);
        $this->metrics = $var;

        return $this;
    }

    /**
     * The date the event was created. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 10;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreated()
    {
        return isset($this->created) ? $this->created : null;
    }

    public function hasCreated()
    {
        return isset($this->created);
    }

    public function clearCreated()
    {
        unset($this->created);
    }

    /**
     * The date the event was created. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 10;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreated($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created = $var;

        return $this;
    }

    /**
     * The date the event updated. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 11;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getUpdated()
    {
        return isset($this->updated) ? $this->updated : null;
    }

    public function hasUpdated()
    {
        return isset($this->updated);
    }

    public function clearUpdated()
    {
        unset($this->updated);
    }

    /**
     * The date the event updated. Not writable.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 11;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setUpdated($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->updated = $var;

        return $this;
    }

}

