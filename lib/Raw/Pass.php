<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/raw/pass.proto

namespace Raw;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The pass object
 *
 * Generated from protobuf message <code>raw.Pass</code>
 */
class Pass extends \Google\Protobuf\Internal\Message
{
    /**
     * Id assigned by PassKit to represent the pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * This can be used to set the 'external' ID of pass (i.e. the ID as it's being used in your system). If provided then this can be used to query & update passes. This field will be treated as unique within the pass project, and cannot be updated at a later stage.
     *
     * Generated from protobuf field <code>string externalId = 2;</code>
     */
    protected $externalId = '';
    /**
     * The pass project id to issue this pass for.
     *
     * Generated from protobuf field <code>string passProjectId = 3;</code>
     */
    protected $passProjectId = '';
    /**
     * The ID of the template this pass is issued for.
     *
     * Generated from protobuf field <code>string passTemplateId = 4;</code>
     */
    protected $passTemplateId = '';
    /**
     * Can contain personal details. Any data in the personalDetails object is stored encrypted.
     *
     * Generated from protobuf field <code>.io.Person personalDetails = 5;</code>
     */
    protected $personalDetails = null;
    /**
     * Dynamic data fields. This data cannot be queried on, but can be used to render / update on the pass. Fields will render in the correct format based on template settings.
     *
     * Generated from protobuf field <code>map<string, string> dynamicData = 6;</code>
     */
    private $dynamicData;
    /**
     * Indicates if this pass is opted out to receive marketing promotions (defaults to false).
     *
     * Generated from protobuf field <code>bool optOut = 8;</code>
     */
    protected $optOut = false;
    /**
     * Indicates if this pass is currently voided.
     *
     * Generated from protobuf field <code>bool isVoided = 9;</code>
     */
    protected $isVoided = false;
    /**
     * Indicates when the pass invalidates. When the invalidate date hits, the pass is automatically invalidated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp invalidateDate = 10;</code>
     */
    protected $invalidateDate = null;
    /**
     * Indicates when the pass expires. When the expiry date hits, it will automatically gray out the barcode.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiryDate = 11;</code>
     */
    protected $expiryDate = null;
    /**
     * Can hold optional pass customization fields like appLaunchURL and userData
     *
     * Generated from protobuf field <code>.io.PassOptions passOptions = 12;</code>
     */
    protected $passOptions = null;
    /**
     * Pass level overrides for proximity & images.
     *
     * Generated from protobuf field <code>.io.PassOverrides passOverrides = 13;</code>
     */
    protected $passOverrides = null;
    /**
     * Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data.
     *
     * Generated from protobuf field <code>.io.Metadata passMetaData = 14;</code>
     */
    protected $passMetaData = null;
    /**
     * The date the pass was created in the PassKit system.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 15;</code>
     */
    protected $created = null;
    /**
     * The date the pass was last updated in the PassKit system.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 16;</code>
     */
    protected $updated = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           Id assigned by PassKit to represent the pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
     *     @type string $externalId
     *           This can be used to set the 'external' ID of pass (i.e. the ID as it's being used in your system). If provided then this can be used to query & update passes. This field will be treated as unique within the pass project, and cannot be updated at a later stage.
     *     @type string $passProjectId
     *           The pass project id to issue this pass for.
     *     @type string $passTemplateId
     *           The ID of the template this pass is issued for.
     *     @type \Io\Person $personalDetails
     *           Can contain personal details. Any data in the personalDetails object is stored encrypted.
     *     @type array|\Google\Protobuf\Internal\MapField $dynamicData
     *           Dynamic data fields. This data cannot be queried on, but can be used to render / update on the pass. Fields will render in the correct format based on template settings.
     *     @type bool $optOut
     *           Indicates if this pass is opted out to receive marketing promotions (defaults to false).
     *     @type bool $isVoided
     *           Indicates if this pass is currently voided.
     *     @type \Google\Protobuf\Timestamp $invalidateDate
     *           Indicates when the pass invalidates. When the invalidate date hits, the pass is automatically invalidated.
     *     @type \Google\Protobuf\Timestamp $expiryDate
     *           Indicates when the pass expires. When the expiry date hits, it will automatically gray out the barcode.
     *     @type \Io\PassOptions $passOptions
     *           Can hold optional pass customization fields like appLaunchURL and userData
     *     @type \Io\PassOverrides $passOverrides
     *           Pass level overrides for proximity & images.
     *     @type \Io\Metadata $passMetaData
     *           Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data.
     *     @type \Google\Protobuf\Timestamp $created
     *           The date the pass was created in the PassKit system.
     *     @type \Google\Protobuf\Timestamp $updated
     *           The date the pass was last updated in the PassKit system.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\Raw\Pass::initOnce();
        parent::__construct($data);
    }

    /**
     * Id assigned by PassKit to represent the pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Id assigned by PassKit to represent the pass record. It will be used as the serial number in Apple Wallet and as the Object identifier for Google Wallet. This field is not writable.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * This can be used to set the 'external' ID of pass (i.e. the ID as it's being used in your system). If provided then this can be used to query & update passes. This field will be treated as unique within the pass project, and cannot be updated at a later stage.
     *
     * Generated from protobuf field <code>string externalId = 2;</code>
     * @return string
     */
    public function getExternalId()
    {
        return $this->externalId;
    }

    /**
     * This can be used to set the 'external' ID of pass (i.e. the ID as it's being used in your system). If provided then this can be used to query & update passes. This field will be treated as unique within the pass project, and cannot be updated at a later stage.
     *
     * Generated from protobuf field <code>string externalId = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setExternalId($var)
    {
        GPBUtil::checkString($var, True);
        $this->externalId = $var;

        return $this;
    }

    /**
     * The pass project id to issue this pass for.
     *
     * Generated from protobuf field <code>string passProjectId = 3;</code>
     * @return string
     */
    public function getPassProjectId()
    {
        return $this->passProjectId;
    }

    /**
     * The pass project id to issue this pass for.
     *
     * Generated from protobuf field <code>string passProjectId = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setPassProjectId($var)
    {
        GPBUtil::checkString($var, True);
        $this->passProjectId = $var;

        return $this;
    }

    /**
     * The ID of the template this pass is issued for.
     *
     * Generated from protobuf field <code>string passTemplateId = 4;</code>
     * @return string
     */
    public function getPassTemplateId()
    {
        return $this->passTemplateId;
    }

    /**
     * The ID of the template this pass is issued for.
     *
     * Generated from protobuf field <code>string passTemplateId = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPassTemplateId($var)
    {
        GPBUtil::checkString($var, True);
        $this->passTemplateId = $var;

        return $this;
    }

    /**
     * Can contain personal details. Any data in the personalDetails object is stored encrypted.
     *
     * Generated from protobuf field <code>.io.Person personalDetails = 5;</code>
     * @return \Io\Person|null
     */
    public function getPersonalDetails()
    {
        return isset($this->personalDetails) ? $this->personalDetails : null;
    }

    public function hasPersonalDetails()
    {
        return isset($this->personalDetails);
    }

    public function clearPersonalDetails()
    {
        unset($this->personalDetails);
    }

    /**
     * Can contain personal details. Any data in the personalDetails object is stored encrypted.
     *
     * Generated from protobuf field <code>.io.Person personalDetails = 5;</code>
     * @param \Io\Person $var
     * @return $this
     */
    public function setPersonalDetails($var)
    {
        GPBUtil::checkMessage($var, \Io\Person::class);
        $this->personalDetails = $var;

        return $this;
    }

    /**
     * Dynamic data fields. This data cannot be queried on, but can be used to render / update on the pass. Fields will render in the correct format based on template settings.
     *
     * Generated from protobuf field <code>map<string, string> dynamicData = 6;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getDynamicData()
    {
        return $this->dynamicData;
    }

    /**
     * Dynamic data fields. This data cannot be queried on, but can be used to render / update on the pass. Fields will render in the correct format based on template settings.
     *
     * Generated from protobuf field <code>map<string, string> dynamicData = 6;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setDynamicData($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->dynamicData = $arr;

        return $this;
    }

    /**
     * Indicates if this pass is opted out to receive marketing promotions (defaults to false).
     *
     * Generated from protobuf field <code>bool optOut = 8;</code>
     * @return bool
     */
    public function getOptOut()
    {
        return $this->optOut;
    }

    /**
     * Indicates if this pass is opted out to receive marketing promotions (defaults to false).
     *
     * Generated from protobuf field <code>bool optOut = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setOptOut($var)
    {
        GPBUtil::checkBool($var);
        $this->optOut = $var;

        return $this;
    }

    /**
     * Indicates if this pass is currently voided.
     *
     * Generated from protobuf field <code>bool isVoided = 9;</code>
     * @return bool
     */
    public function getIsVoided()
    {
        return $this->isVoided;
    }

    /**
     * Indicates if this pass is currently voided.
     *
     * Generated from protobuf field <code>bool isVoided = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsVoided($var)
    {
        GPBUtil::checkBool($var);
        $this->isVoided = $var;

        return $this;
    }

    /**
     * Indicates when the pass invalidates. When the invalidate date hits, the pass is automatically invalidated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp invalidateDate = 10;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getInvalidateDate()
    {
        return isset($this->invalidateDate) ? $this->invalidateDate : null;
    }

    public function hasInvalidateDate()
    {
        return isset($this->invalidateDate);
    }

    public function clearInvalidateDate()
    {
        unset($this->invalidateDate);
    }

    /**
     * Indicates when the pass invalidates. When the invalidate date hits, the pass is automatically invalidated.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp invalidateDate = 10;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setInvalidateDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->invalidateDate = $var;

        return $this;
    }

    /**
     * Indicates when the pass expires. When the expiry date hits, it will automatically gray out the barcode.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiryDate = 11;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getExpiryDate()
    {
        return isset($this->expiryDate) ? $this->expiryDate : null;
    }

    public function hasExpiryDate()
    {
        return isset($this->expiryDate);
    }

    public function clearExpiryDate()
    {
        unset($this->expiryDate);
    }

    /**
     * Indicates when the pass expires. When the expiry date hits, it will automatically gray out the barcode.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiryDate = 11;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setExpiryDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->expiryDate = $var;

        return $this;
    }

    /**
     * Can hold optional pass customization fields like appLaunchURL and userData
     *
     * Generated from protobuf field <code>.io.PassOptions passOptions = 12;</code>
     * @return \Io\PassOptions|null
     */
    public function getPassOptions()
    {
        return isset($this->passOptions) ? $this->passOptions : null;
    }

    public function hasPassOptions()
    {
        return isset($this->passOptions);
    }

    public function clearPassOptions()
    {
        unset($this->passOptions);
    }

    /**
     * Can hold optional pass customization fields like appLaunchURL and userData
     *
     * Generated from protobuf field <code>.io.PassOptions passOptions = 12;</code>
     * @param \Io\PassOptions $var
     * @return $this
     */
    public function setPassOptions($var)
    {
        GPBUtil::checkMessage($var, \Io\PassOptions::class);
        $this->passOptions = $var;

        return $this;
    }

    /**
     * Pass level overrides for proximity & images.
     *
     * Generated from protobuf field <code>.io.PassOverrides passOverrides = 13;</code>
     * @return \Io\PassOverrides|null
     */
    public function getPassOverrides()
    {
        return isset($this->passOverrides) ? $this->passOverrides : null;
    }

    public function hasPassOverrides()
    {
        return isset($this->passOverrides);
    }

    public function clearPassOverrides()
    {
        unset($this->passOverrides);
    }

    /**
     * Pass level overrides for proximity & images.
     *
     * Generated from protobuf field <code>.io.PassOverrides passOverrides = 13;</code>
     * @param \Io\PassOverrides $var
     * @return $this
     */
    public function setPassOverrides($var)
    {
        GPBUtil::checkMessage($var, \Io\PassOverrides::class);
        $this->passOverrides = $var;

        return $this;
    }

    /**
     * Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data.
     *
     * Generated from protobuf field <code>.io.Metadata passMetaData = 14;</code>
     * @return \Io\Metadata|null
     */
    public function getPassMetaData()
    {
        return isset($this->passMetaData) ? $this->passMetaData : null;
    }

    public function hasPassMetaData()
    {
        return isset($this->passMetaData);
    }

    public function clearPassMetaData()
    {
        unset($this->passMetaData);
    }

    /**
     * Pass Metadata hold meta data about the pass like status, lifecycle, utm details and installation data.
     *
     * Generated from protobuf field <code>.io.Metadata passMetaData = 14;</code>
     * @param \Io\Metadata $var
     * @return $this
     */
    public function setPassMetaData($var)
    {
        GPBUtil::checkMessage($var, \Io\Metadata::class);
        $this->passMetaData = $var;

        return $this;
    }

    /**
     * The date the pass was created in the PassKit system.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 15;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getCreated()
    {
        return isset($this->created) ? $this->created : null;
    }

    public function hasCreated()
    {
        return isset($this->created);
    }

    public function clearCreated()
    {
        unset($this->created);
    }

    /**
     * The date the pass was created in the PassKit system.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp created = 15;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setCreated($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->created = $var;

        return $this;
    }

    /**
     * The date the pass was last updated in the PassKit system.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 16;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getUpdated()
    {
        return isset($this->updated) ? $this->updated : null;
    }

    public function hasUpdated()
    {
        return isset($this->updated);
    }

    public function clearUpdated()
    {
        unset($this->updated);
    }

    /**
     * The date the pass was last updated in the PassKit system.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp updated = 16;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setUpdated($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->updated = $var;

        return $this;
    }

}

