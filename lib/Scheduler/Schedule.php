<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/scheduler/scheduler.proto

namespace Scheduler;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>scheduler.Schedule</code>
 */
class Schedule extends \Google\Protobuf\Internal\Message
{
    /**
     * Crontab schedule expression. e.g. '0 * * * *', '&#64;hourly'
     * For month end job, '&#64;monthend' is available.
     * To run a one-off job now, '&#64;now' is available.
     * Crontab generator tool https://crontab.guru
     * Reference https://en.wikipedia.org/wiki/Cron
     *
     * Generated from protobuf field <code>string schedule = 1;</code>
     */
    protected $schedule = '';
    /**
     * Iana timezone. Default is UTC.
     *
     * Generated from protobuf field <code>string timezone = 2;</code>
     */
    protected $timezone = '';
    /**
     * Datetime to start the first job or resume the paused job.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp startsAt = 3;</code>
     */
    protected $startsAt = null;
    protected $expiry;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $schedule
     *           Crontab schedule expression. e.g. '0 * * * *', '&#64;hourly'
     *           For month end job, '&#64;monthend' is available.
     *           To run a one-off job now, '&#64;now' is available.
     *           Crontab generator tool https://crontab.guru
     *           Reference https://en.wikipedia.org/wiki/Cron
     *     @type string $timezone
     *           Iana timezone. Default is UTC.
     *     @type \Google\Protobuf\Timestamp $startsAt
     *           Datetime to start the first job or resume the paused job.
     *     @type int $repeatCount
     *           Set repeat count to repeat the job for certain times (eg. 3 will repeat the job for 3 times).
     *           If job is one off, set -1.
     *     @type \Google\Protobuf\Timestamp $expiryDate
     *           The date which job will be expired.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\Scheduler\Scheduler::initOnce();
        parent::__construct($data);
    }

    /**
     * Crontab schedule expression. e.g. '0 * * * *', '&#64;hourly'
     * For month end job, '&#64;monthend' is available.
     * To run a one-off job now, '&#64;now' is available.
     * Crontab generator tool https://crontab.guru
     * Reference https://en.wikipedia.org/wiki/Cron
     *
     * Generated from protobuf field <code>string schedule = 1;</code>
     * @return string
     */
    public function getSchedule()
    {
        return $this->schedule;
    }

    /**
     * Crontab schedule expression. e.g. '0 * * * *', '&#64;hourly'
     * For month end job, '&#64;monthend' is available.
     * To run a one-off job now, '&#64;now' is available.
     * Crontab generator tool https://crontab.guru
     * Reference https://en.wikipedia.org/wiki/Cron
     *
     * Generated from protobuf field <code>string schedule = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSchedule($var)
    {
        GPBUtil::checkString($var, True);
        $this->schedule = $var;

        return $this;
    }

    /**
     * Iana timezone. Default is UTC.
     *
     * Generated from protobuf field <code>string timezone = 2;</code>
     * @return string
     */
    public function getTimezone()
    {
        return $this->timezone;
    }

    /**
     * Iana timezone. Default is UTC.
     *
     * Generated from protobuf field <code>string timezone = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setTimezone($var)
    {
        GPBUtil::checkString($var, True);
        $this->timezone = $var;

        return $this;
    }

    /**
     * Datetime to start the first job or resume the paused job.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp startsAt = 3;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getStartsAt()
    {
        return isset($this->startsAt) ? $this->startsAt : null;
    }

    public function hasStartsAt()
    {
        return isset($this->startsAt);
    }

    public function clearStartsAt()
    {
        unset($this->startsAt);
    }

    /**
     * Datetime to start the first job or resume the paused job.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp startsAt = 3;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setStartsAt($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->startsAt = $var;

        return $this;
    }

    /**
     * Set repeat count to repeat the job for certain times (eg. 3 will repeat the job for 3 times).
     * If job is one off, set -1.
     *
     * Generated from protobuf field <code>sint32 repeatCount = 15;</code>
     * @return int
     */
    public function getRepeatCount()
    {
        return $this->readOneof(15);
    }

    public function hasRepeatCount()
    {
        return $this->hasOneof(15);
    }

    /**
     * Set repeat count to repeat the job for certain times (eg. 3 will repeat the job for 3 times).
     * If job is one off, set -1.
     *
     * Generated from protobuf field <code>sint32 repeatCount = 15;</code>
     * @param int $var
     * @return $this
     */
    public function setRepeatCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->writeOneof(15, $var);

        return $this;
    }

    /**
     * The date which job will be expired.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiryDate = 16;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getExpiryDate()
    {
        return $this->readOneof(16);
    }

    public function hasExpiryDate()
    {
        return $this->hasOneof(16);
    }

    /**
     * The date which job will be expired.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expiryDate = 16;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setExpiryDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->writeOneof(16, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getExpiry()
    {
        return $this->whichOneof("expiry");
    }

}

