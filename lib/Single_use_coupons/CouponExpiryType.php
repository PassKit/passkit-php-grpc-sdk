<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/single_use_coupons/offer.proto

namespace Single_use_coupons;

use UnexpectedValueException;

/**
 * Protobuf type <code>single_use_coupons.CouponExpiryType</code>
 */
class CouponExpiryType
{
    /**
     * Generated from protobuf enum <code>EXPIRY_DO_NOT_USE = 0;</code>
     */
    const EXPIRY_DO_NOT_USE = 0;
    /**
     * The system will set the coupon expiry based to the campaign end date (default).
     *
     * Generated from protobuf enum <code>AUTO_EXPIRE_OFFER_END_DATE = 1;</code>
     */
    const AUTO_EXPIRE_OFFER_END_DATE = 1;
    /**
     * The system will set the coupon expiry based to the redemption end date.
     *
     * Generated from protobuf enum <code>AUTO_EXPIRE_REDEMPTION_END_DATE = 2;</code>
     */
    const AUTO_EXPIRE_REDEMPTION_END_DATE = 2;
    /**
     * The system will calculate the expiry date based the number of days after the digital coupon is issued.
     * The calculated date needs to be within range of the campaign date rules. For example, if issue date + EXPIRE_AFTER_X_DAYS is greater than the campaign end date, it will default to the campaign end date.
     * The expiry date will be based on your timezone. The digital card will expire at 23:59:59 of set date in fixed timezone.
     *
     * Generated from protobuf enum <code>EXPIRE_AFTER_X_DAYS = 3;</code>
     */
    const EXPIRE_AFTER_X_DAYS = 3;
    /**
     * If you want to set the expiry date for each individual coupon when the coupon is issued, you can use this expiry type.
     * You can set expiry date and time in fixed timezone on the coupon record.
     * The date needs to be within range of the campaign date rules, otherwise the system will return an error.
     *
     * Generated from protobuf enum <code>EXPIRE_ON_VARIABLE_DATE_TIME = 4;</code>
     */
    const EXPIRE_ON_VARIABLE_DATE_TIME = 4;

    private static $valueToName = [
        self::EXPIRY_DO_NOT_USE => 'EXPIRY_DO_NOT_USE',
        self::AUTO_EXPIRE_OFFER_END_DATE => 'AUTO_EXPIRE_OFFER_END_DATE',
        self::AUTO_EXPIRE_REDEMPTION_END_DATE => 'AUTO_EXPIRE_REDEMPTION_END_DATE',
        self::EXPIRE_AFTER_X_DAYS => 'EXPIRE_AFTER_X_DAYS',
        self::EXPIRE_ON_VARIABLE_DATE_TIME => 'EXPIRE_ON_VARIABLE_DATE_TIME',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

