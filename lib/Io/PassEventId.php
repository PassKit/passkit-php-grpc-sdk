<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: io/common/integration.proto

namespace Io;

use UnexpectedValueException;

/**
 * Name of pass event the third part app can subscribe to.
 *
 * Protobuf type <code>io.PassEventId</code>
 */
class PassEventId
{
    /**
     * The pass payload will not be sent.
     *
     * Generated from protobuf enum <code>PASS_EVENT_NONE = 0;</code>
     */
    const PASS_EVENT_NONE = 0;
    /**
     * The pass payload will be sent to destination when pass record is created and issued.
     *
     * Generated from protobuf enum <code>PASS_EVENT_RECORD_CREATED = 1;</code>
     */
    const PASS_EVENT_RECORD_CREATED = 1;
    /**
     * The pass payload will be sent to destination when pass is installed on a mobile device.
     *
     * Generated from protobuf enum <code>PASS_EVENT_INSTALLED = 2;</code>
     */
    const PASS_EVENT_INSTALLED = 2;
    /**
     * The pass payload will be sent to destination when pass record or contents have been updated.
     *
     * Generated from protobuf enum <code>PASS_EVENT_RECORD_UPDATED = 4;</code>
     */
    const PASS_EVENT_RECORD_UPDATED = 4;
    /**
     * The pass payload will be sent to destination when pass is uninstalled from a mobile device.
     *
     * Generated from protobuf enum <code>PASS_EVENT_UNINSTALLED = 8;</code>
     */
    const PASS_EVENT_UNINSTALLED = 8;
    /**
     * The pass payload will be sent to destination when pass is invalidated or expired. When pass is invalidated or expired, a pass will lose its barcode and pass content cannot be updated anymore.
     *
     * Generated from protobuf enum <code>PASS_EVENT_INVALIDATED = 16;</code>
     */
    const PASS_EVENT_INVALIDATED = 16;
    /**
     * The pass payload will be sent to destination when pass record is deleted from the PassKit database.
     *
     * Generated from protobuf enum <code>PASS_EVENT_RECORD_DELETED = 32;</code>
     */
    const PASS_EVENT_RECORD_DELETED = 32;

    private static $valueToName = [
        self::PASS_EVENT_NONE => 'PASS_EVENT_NONE',
        self::PASS_EVENT_RECORD_CREATED => 'PASS_EVENT_RECORD_CREATED',
        self::PASS_EVENT_INSTALLED => 'PASS_EVENT_INSTALLED',
        self::PASS_EVENT_RECORD_UPDATED => 'PASS_EVENT_RECORD_UPDATED',
        self::PASS_EVENT_UNINSTALLED => 'PASS_EVENT_UNINSTALLED',
        self::PASS_EVENT_INVALIDATED => 'PASS_EVENT_INVALIDATED',
        self::PASS_EVENT_RECORD_DELETED => 'PASS_EVENT_RECORD_DELETED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

