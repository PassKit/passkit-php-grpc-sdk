<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/common/links.proto

namespace Io;

use UnexpectedValueException;

/**
 * Used to specify the type of link for link field. Each type has different icon on Google Pay.
 *
 * Protobuf type <code>io.LinkType</code>
 */
class LinkType
{
    /**
     * A link to website.
     *
     * Generated from protobuf enum <code>URI_DO_NOT_USE = 0;</code>
     */
    const URI_DO_NOT_USE = 0;
    /**
     * A link to website.
     *
     * Generated from protobuf enum <code>URI_WEB = 1;</code>
     */
    const URI_WEB = 1;
    /**
     * A phone number.
     *
     * Generated from protobuf enum <code>URI_TEL = 2;</code>
     */
    const URI_TEL = 2;
    /**
     * An email address.
     *
     * Generated from protobuf enum <code>URI_EMAIL = 3;</code>
     */
    const URI_EMAIL = 3;
    /**
     * A location address.
     *
     * Generated from protobuf enum <code>URI_LOCATION = 4;</code>
     */
    const URI_LOCATION = 4;
    /**
     * A calendar event.
     *
     * Generated from protobuf enum <code>URI_CALENDAR = 5;</code>
     */
    const URI_CALENDAR = 5;

    private static $valueToName = [
        self::URI_DO_NOT_USE => 'URI_DO_NOT_USE',
        self::URI_WEB => 'URI_WEB',
        self::URI_TEL => 'URI_TEL',
        self::URI_EMAIL => 'URI_EMAIL',
        self::URI_LOCATION => 'URI_LOCATION',
        self::URI_CALENDAR => 'URI_CALENDAR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

