<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/common/integration.proto

namespace Io;

use UnexpectedValueException;

/**
 * Protocol specific events for the Single Use Coupon protocol.
 *
 * Protobuf type <code>io.CouponEventId</code>
 */
class CouponEventId
{
    /**
     * Generated from protobuf enum <code>COUPON_EVENT_NONE = 0;</code>
     */
    const COUPON_EVENT_NONE = 0;
    /**
     * Triggered when coupon is issued.
     *
     * Generated from protobuf enum <code>COUPON_EVENT_CREATED = 1;</code>
     */
    const COUPON_EVENT_CREATED = 1;
    /**
     * Triggered when coupon is redeemed.
     *
     * Generated from protobuf enum <code>COUPON_EVENT_REDEEMED = 2;</code>
     */
    const COUPON_EVENT_REDEEMED = 2;
    /**
     * Triggered when any of coupon field is updated.
     *
     * Generated from protobuf enum <code>COUPON_EVENT_UPDATED = 4;</code>
     */
    const COUPON_EVENT_UPDATED = 4;
    /**
     * Triggered when coupon record is deleted.
     *
     * Generated from protobuf enum <code>COUPON_EVENT_DELETED = 8;</code>
     */
    const COUPON_EVENT_DELETED = 8;

    private static $valueToName = [
        self::COUPON_EVENT_NONE => 'COUPON_EVENT_NONE',
        self::COUPON_EVENT_CREATED => 'COUPON_EVENT_CREATED',
        self::COUPON_EVENT_REDEEMED => 'COUPON_EVENT_REDEEMED',
        self::COUPON_EVENT_UPDATED => 'COUPON_EVENT_UPDATED',
        self::COUPON_EVENT_DELETED => 'COUPON_EVENT_DELETED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

