<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: io/common/expiry.proto

namespace Io;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The digital card will be expired on the expiry date. The barcode will not be rendered on digital card and the card itself will not be updated after it has been expired.
 *
 * Generated from protobuf message <code>io.ExpirySettings</code>
 */
class ExpirySettings extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.io.ExpiryType expiryType = 1;</code>
     */
    protected $expiryType = 0;
    protected $expiryOneof;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $expiryType
     *     @type \Io\Date $fixedExpiryDate
     *           The expiry date for digital membership card.
     *           Please set expiryType as EXPIRE_ON_FIXED_DATE.
     *     @type int $expireAfterXDays
     *           Number of days the digital membership card is expired after the enrolment date.
     *           Please set expiryType as EXPIRE_AFTER_X_DAYS.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\Common\Expiry::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.io.ExpiryType expiryType = 1;</code>
     * @return int
     */
    public function getExpiryType()
    {
        return $this->expiryType;
    }

    /**
     * Generated from protobuf field <code>.io.ExpiryType expiryType = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setExpiryType($var)
    {
        GPBUtil::checkEnum($var, \Io\ExpiryType::class);
        $this->expiryType = $var;

        return $this;
    }

    /**
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     *
     * Generated from protobuf field <code>.io.Date fixedExpiryDate = 2;</code>
     * @return \Io\Date|null
     */
    public function getFixedExpiryDate()
    {
        return $this->readOneof(2);
    }

    public function hasFixedExpiryDate()
    {
        return $this->hasOneof(2);
    }

    /**
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     *
     * Generated from protobuf field <code>.io.Date fixedExpiryDate = 2;</code>
     * @param \Io\Date $var
     * @return $this
     */
    public function setFixedExpiryDate($var)
    {
        GPBUtil::checkMessage($var, \Io\Date::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Number of days the digital membership card is expired after the enrolment date.
     * Please set expiryType as EXPIRE_AFTER_X_DAYS.
     *
     * Generated from protobuf field <code>uint32 expireAfterXDays = 3;</code>
     * @return int
     */
    public function getExpireAfterXDays()
    {
        return $this->readOneof(3);
    }

    public function hasExpireAfterXDays()
    {
        return $this->hasOneof(3);
    }

    /**
     * Number of days the digital membership card is expired after the enrolment date.
     * Please set expiryType as EXPIRE_AFTER_X_DAYS.
     *
     * Generated from protobuf field <code>uint32 expireAfterXDays = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setExpireAfterXDays($var)
    {
        GPBUtil::checkUint32($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getExpiryOneof()
    {
        return $this->whichOneof("expiryOneof");
    }

}

