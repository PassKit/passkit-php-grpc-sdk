<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/common/integration.proto

namespace Io;

use UnexpectedValueException;

/**
 * IntegrationType allows to select the timing of integration occurs and the order of data processing.
 *
 * Protobuf type <code>io.IntegrationType</code>
 */
class IntegrationType
{
    /**
     * Generated from protobuf enum <code>INTEGRATION_TYPE_NONE = 0;</code>
     */
    const INTEGRATION_TYPE_NONE = 0;
    /**
     * Trigger event occurs on a third party platform which triggers action (chain of events) inside the PassKit. E.g. Database update triggers PassKit to issue a pass.
     *
     * Generated from protobuf enum <code>SOURCE_INTEGRATION = 1;</code>
     */
    const SOURCE_INTEGRATION = 1;
    /**
     * Pass holder data is processed by a third party application first then its outcome and original data are stored in PassKit.
     *
     * Generated from protobuf enum <code>HOOK_BEFORE_OBJECT_RECORD_CREATION = 4;</code>
     */
    const HOOK_BEFORE_OBJECT_RECORD_CREATION = 4;
    /**
     * A hook event occurs after pass holder's data is created on PassKit.
     *
     * Generated from protobuf enum <code>HOOK_AFTER_OBJECT_RECORD_CREATION = 8;</code>
     */
    const HOOK_AFTER_OBJECT_RECORD_CREATION = 8;
    /**
     * A hook event occurs after pass holder record creation and before pass issue.
     *
     * Generated from protobuf enum <code>HOOK_BEFORE_PASS_ISSUE = 16;</code>
     */
    const HOOK_BEFORE_PASS_ISSUE = 16;
    /**
     * A hook event occurs after pass issue.
     *
     * Generated from protobuf enum <code>HOOK_AFTER_PASS_ISSUE = 32;</code>
     */
    const HOOK_AFTER_PASS_ISSUE = 32;
    /**
     * A hook event occurs after pass has been installed on mobile.
     *
     * Generated from protobuf enum <code>HOOK_AFTER_PASS_INSTALL = 64;</code>
     */
    const HOOK_AFTER_PASS_INSTALL = 64;
    /**
     * A hook event occurs after pass has been uninstalled from mobile.
     *
     * Generated from protobuf enum <code>HOOK_AFTER_PASS_UNINSTALL = 128;</code>
     */
    const HOOK_AFTER_PASS_UNINSTALL = 128;
    /**
     * A hook event occurs before pass holder's record is updated on PassKit.
     *
     * Generated from protobuf enum <code>HOOK_BEFORE_OBJECT_RECORD_UPDATE = 256;</code>
     */
    const HOOK_BEFORE_OBJECT_RECORD_UPDATE = 256;
    /**
     * A hook event occurs after pass holder's record is updated on PassKit.
     *
     * Generated from protobuf enum <code>HOOK_AFTER_OBJECT_RECORD_UPDATE = 512;</code>
     */
    const HOOK_AFTER_OBJECT_RECORD_UPDATE = 512;
    /**
     * A hook event occurs before the pass is updated. This includes changes in dynamic information (e.g. displayName), generic information (e.g. links, legal disclaimer), pass design (e.g. background color).
     *
     * Generated from protobuf enum <code>HOOK_BEFORE_PASS_RECORD_UPDATE = 1024;</code>
     */
    const HOOK_BEFORE_PASS_RECORD_UPDATE = 1024;
    /**
     * A hook event occurs after the pass is updated. This includes changes in dynamic information (e.g. displayName), generic information (e.g. links, legal disclaimer), pass design (e.g. background color).
     *
     * Generated from protobuf enum <code>HOOK_AFTER_PASS_RECORD_UPDATE = 2048;</code>
     */
    const HOOK_AFTER_PASS_RECORD_UPDATE = 2048;
    /**
     * A hook event occurs before the information on the pass is updated.
     *
     * Generated from protobuf enum <code>HOOK_BEFORE_PASS_UPDATE = 4096;</code>
     */
    const HOOK_BEFORE_PASS_UPDATE = 4096;
    /**
     * A hook event occurs after the information on the pass is updated.
     *
     * Generated from protobuf enum <code>HOOK_AFTER_PASS_UPDATE = 8192;</code>
     */
    const HOOK_AFTER_PASS_UPDATE = 8192;
    /**
     * A hook event occurs before a pass is deleted.
     *
     * Generated from protobuf enum <code>HOOK_BEFORE_PASS_RECORD_DELETE = 16384;</code>
     */
    const HOOK_BEFORE_PASS_RECORD_DELETE = 16384;
    /**
     * A hook event occurs after a pass is deleted.
     *
     * Generated from protobuf enum <code>HOOK_AFTER_PASS_RECORD_DELETE = 32768;</code>
     */
    const HOOK_AFTER_PASS_RECORD_DELETE = 32768;

    private static $valueToName = [
        self::INTEGRATION_TYPE_NONE => 'INTEGRATION_TYPE_NONE',
        self::SOURCE_INTEGRATION => 'SOURCE_INTEGRATION',
        self::HOOK_BEFORE_OBJECT_RECORD_CREATION => 'HOOK_BEFORE_OBJECT_RECORD_CREATION',
        self::HOOK_AFTER_OBJECT_RECORD_CREATION => 'HOOK_AFTER_OBJECT_RECORD_CREATION',
        self::HOOK_BEFORE_PASS_ISSUE => 'HOOK_BEFORE_PASS_ISSUE',
        self::HOOK_AFTER_PASS_ISSUE => 'HOOK_AFTER_PASS_ISSUE',
        self::HOOK_AFTER_PASS_INSTALL => 'HOOK_AFTER_PASS_INSTALL',
        self::HOOK_AFTER_PASS_UNINSTALL => 'HOOK_AFTER_PASS_UNINSTALL',
        self::HOOK_BEFORE_OBJECT_RECORD_UPDATE => 'HOOK_BEFORE_OBJECT_RECORD_UPDATE',
        self::HOOK_AFTER_OBJECT_RECORD_UPDATE => 'HOOK_AFTER_OBJECT_RECORD_UPDATE',
        self::HOOK_BEFORE_PASS_RECORD_UPDATE => 'HOOK_BEFORE_PASS_RECORD_UPDATE',
        self::HOOK_AFTER_PASS_RECORD_UPDATE => 'HOOK_AFTER_PASS_RECORD_UPDATE',
        self::HOOK_BEFORE_PASS_UPDATE => 'HOOK_BEFORE_PASS_UPDATE',
        self::HOOK_AFTER_PASS_UPDATE => 'HOOK_AFTER_PASS_UPDATE',
        self::HOOK_BEFORE_PASS_RECORD_DELETE => 'HOOK_BEFORE_PASS_RECORD_DELETE',
        self::HOOK_AFTER_PASS_RECORD_DELETE => 'HOOK_AFTER_PASS_RECORD_DELETE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

