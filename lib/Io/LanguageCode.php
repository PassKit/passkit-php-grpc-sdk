<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: io/common/localization.proto

namespace Io;

use UnexpectedValueException;

/**
 * This is a list of supported languages.
 *
 * Protobuf type <code>io.LanguageCode</code>
 */
class LanguageCode
{
    /**
     * English
     *
     * Generated from protobuf enum <code>EN = 0;</code>
     */
    const EN = 0;
    /**
     * (Arabic) العربية
     *
     * Generated from protobuf enum <code>AR = 4;</code>
     */
    const AR = 4;
    /**
     * 简体中文 (Chinese)
     *
     * Generated from protobuf enum <code>ZH_HANS = 8;</code>
     */
    const ZH_HANS = 8;
    /**
     * 繁體中文 (Traditional Chinese)
     *
     * Generated from protobuf enum <code>ZH_HANT = 12;</code>
     */
    const ZH_HANT = 12;
    /**
     * 香港中文 (Cantonese)
     *
     * Generated from protobuf enum <code>ZH_HK = 16;</code>
     */
    const ZH_HK = 16;
    /**
     * Català (Catalan)
     *
     * Generated from protobuf enum <code>CA = 20;</code>
     */
    const CA = 20;
    /**
     * Hrvatski (Croatian)
     *
     * Generated from protobuf enum <code>HR = 24;</code>
     */
    const HR = 24;
    /**
     * Čeština (Czech)
     *
     * Generated from protobuf enum <code>CS = 28;</code>
     */
    const CS = 28;
    /**
     * Dansk (Danish)
     *
     * Generated from protobuf enum <code>DA = 32;</code>
     */
    const DA = 32;
    /**
     * Deutsch (German)
     *
     * Generated from protobuf enum <code>DE = 36;</code>
     */
    const DE = 36;
    /**
     * English (Australia)
     *
     * Generated from protobuf enum <code>EN_AU = 40;</code>
     */
    const EN_AU = 40;
    /**
     * English (British)
     *
     * Generated from protobuf enum <code>EN_GB = 44;</code>
     */
    const EN_GB = 44;
    /**
     * English (Canada)
     *
     * Generated from protobuf enum <code>EN_CA = 48;</code>
     */
    const EN_CA = 48;
    /**
     * English (India)
     *
     * Generated from protobuf enum <code>EN_US = 52;</code>
     */
    const EN_US = 52;
    /**
     * English (United States)
     *
     * Generated from protobuf enum <code>EN_IN = 56;</code>
     */
    const EN_IN = 56;
    /**
     * Español (Spanish)
     *
     * Generated from protobuf enum <code>ES = 60;</code>
     */
    const ES = 60;
    /**
     * Español (Latin America)
     *
     * Generated from protobuf enum <code>ES_419 = 64;</code>
     */
    const ES_419 = 64;
    /**
     * Suomi (Finnish)
     *
     * Generated from protobuf enum <code>FI = 68;</code>
     */
    const FI = 68;
    /**
     * Français (French)
     *
     * Generated from protobuf enum <code>FR = 72;</code>
     */
    const FR = 72;
    /**
     * Français (Canada)
     *
     * Generated from protobuf enum <code>FR_CA = 76;</code>
     */
    const FR_CA = 76;
    /**
     * Ελληνικά (Greek)
     *
     * Generated from protobuf enum <code>EL = 80;</code>
     */
    const EL = 80;
    /**
     * (Hebrew) עברית
     *
     * Generated from protobuf enum <code>HE = 84;</code>
     */
    const HE = 84;
    /**
     * हिन्दी (Hindi)
     *
     * Generated from protobuf enum <code>HI = 88;</code>
     */
    const HI = 88;
    /**
     * Magyar (Hungarian)
     *
     * Generated from protobuf enum <code>HU = 92;</code>
     */
    const HU = 92;
    /**
     * Bahasa Indonesia (Indonesian)
     *
     * Generated from protobuf enum <code>ID = 96;</code>
     */
    const ID = 96;
    /**
     * Italiano (Italian)
     *
     * Generated from protobuf enum <code>IT = 100;</code>
     */
    const IT = 100;
    /**
     * 日本語 (Japanese)
     *
     * Generated from protobuf enum <code>JA = 104;</code>
     */
    const JA = 104;
    /**
     * 한국어 (Korean)
     *
     * Generated from protobuf enum <code>KO = 108;</code>
     */
    const KO = 108;
    /**
     * Bahasa Melayu (Malay)
     *
     * Generated from protobuf enum <code>MS = 112;</code>
     */
    const MS = 112;
    /**
     * Malti (Maltese)
     *
     * Generated from protobuf enum <code>MT = 116;</code>
     */
    const MT = 116;
    /**
     * Nederlands (Dutch)
     *
     * Generated from protobuf enum <code>NL = 120;</code>
     */
    const NL = 120;
    /**
     * Norsk Bokmål (Norwegian)
     *
     * Generated from protobuf enum <code>NB = 124;</code>
     */
    const NB = 124;
    /**
     * Polski (Polish)
     *
     * Generated from protobuf enum <code>PL = 128;</code>
     */
    const PL = 128;
    /**
     * Português de Portugal (Portuguese)
     *
     * Generated from protobuf enum <code>PT = 132;</code>
     */
    const PT = 132;
    /**
     * Português (Brazilian Portuguese)
     *
     * Generated from protobuf enum <code>PT_BR = 136;</code>
     */
    const PT_BR = 136;
    /**
     * Română (Romanian)
     *
     * Generated from protobuf enum <code>RO = 140;</code>
     */
    const RO = 140;
    /**
     * Русский (Russian)
     *
     * Generated from protobuf enum <code>RU = 144;</code>
     */
    const RU = 144;
    /**
     * Slovenčina (Slovakian)
     *
     * Generated from protobuf enum <code>SK = 148;</code>
     */
    const SK = 148;
    /**
     * Svenska (Swedish)
     *
     * Generated from protobuf enum <code>SV = 152;</code>
     */
    const SV = 152;
    /**
     * ภาษาไทย (Thai)
     *
     * Generated from protobuf enum <code>TH = 156;</code>
     */
    const TH = 156;
    /**
     * Türkçe (Turkish)
     *
     * Generated from protobuf enum <code>TR = 160;</code>
     */
    const TR = 160;
    /**
     * Українська (Ukrainian)
     *
     * Generated from protobuf enum <code>UK = 164;</code>
     */
    const UK = 164;
    /**
     * Tiếng Việt (Vietnamese)
     *
     * Generated from protobuf enum <code>VI = 168;</code>
     */
    const VI = 168;

    private static $valueToName = [
        self::EN => 'EN',
        self::AR => 'AR',
        self::ZH_HANS => 'ZH_HANS',
        self::ZH_HANT => 'ZH_HANT',
        self::ZH_HK => 'ZH_HK',
        self::CA => 'CA',
        self::HR => 'HR',
        self::CS => 'CS',
        self::DA => 'DA',
        self::DE => 'DE',
        self::EN_AU => 'EN_AU',
        self::EN_GB => 'EN_GB',
        self::EN_CA => 'EN_CA',
        self::EN_US => 'EN_US',
        self::EN_IN => 'EN_IN',
        self::ES => 'ES',
        self::ES_419 => 'ES_419',
        self::FI => 'FI',
        self::FR => 'FR',
        self::FR_CA => 'FR_CA',
        self::EL => 'EL',
        self::HE => 'HE',
        self::HI => 'HI',
        self::HU => 'HU',
        self::ID => 'ID',
        self::IT => 'IT',
        self::JA => 'JA',
        self::KO => 'KO',
        self::MS => 'MS',
        self::MT => 'MT',
        self::NL => 'NL',
        self::NB => 'NB',
        self::PL => 'PL',
        self::PT => 'PT',
        self::PT_BR => 'PT_BR',
        self::RO => 'RO',
        self::RU => 'RU',
        self::SK => 'SK',
        self::SV => 'SV',
        self::TH => 'TH',
        self::TR => 'TR',
        self::UK => 'UK',
        self::VI => 'VI',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

