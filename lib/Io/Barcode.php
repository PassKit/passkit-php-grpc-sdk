<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/common/template.proto

namespace Io;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>io.Barcode</code>
 */
class Barcode extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string payload = 1;</code>
     */
    protected $payload = '';
    /**
     * Generated from protobuf field <code>.io.BarcodeType format = 2;</code>
     */
    protected $format = 0;
    /**
     * Generated from protobuf field <code>string altText = 3;</code>
     */
    protected $altText = '';
    /**
     * Generated from protobuf field <code>.io.LocalizedString localizedAltText = 4;</code>
     */
    protected $localizedAltText = null;
    /**
     * Generated from protobuf field <code>string messageEncoding = 5;</code>
     */
    protected $messageEncoding = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $payload
     *     @type int $format
     *     @type string $altText
     *     @type \Io\LocalizedString $localizedAltText
     *     @type string $messageEncoding
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\Common\Template::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string payload = 1;</code>
     * @return string
     */
    public function getPayload()
    {
        return $this->payload;
    }

    /**
     * Generated from protobuf field <code>string payload = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPayload($var)
    {
        GPBUtil::checkString($var, True);
        $this->payload = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.io.BarcodeType format = 2;</code>
     * @return int
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     * Generated from protobuf field <code>.io.BarcodeType format = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setFormat($var)
    {
        GPBUtil::checkEnum($var, \Io\BarcodeType::class);
        $this->format = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string altText = 3;</code>
     * @return string
     */
    public function getAltText()
    {
        return $this->altText;
    }

    /**
     * Generated from protobuf field <code>string altText = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setAltText($var)
    {
        GPBUtil::checkString($var, True);
        $this->altText = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.io.LocalizedString localizedAltText = 4;</code>
     * @return \Io\LocalizedString
     */
    public function getLocalizedAltText()
    {
        return isset($this->localizedAltText) ? $this->localizedAltText : null;
    }

    public function hasLocalizedAltText()
    {
        return isset($this->localizedAltText);
    }

    public function clearLocalizedAltText()
    {
        unset($this->localizedAltText);
    }

    /**
     * Generated from protobuf field <code>.io.LocalizedString localizedAltText = 4;</code>
     * @param \Io\LocalizedString $var
     * @return $this
     */
    public function setLocalizedAltText($var)
    {
        GPBUtil::checkMessage($var, \Io\LocalizedString::class);
        $this->localizedAltText = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>string messageEncoding = 5;</code>
     * @return string
     */
    public function getMessageEncoding()
    {
        return $this->messageEncoding;
    }

    /**
     * Generated from protobuf field <code>string messageEncoding = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setMessageEncoding($var)
    {
        GPBUtil::checkString($var, True);
        $this->messageEncoding = $var;

        return $this;
    }

}

