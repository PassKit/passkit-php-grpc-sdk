<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/common/transaction.proto

namespace Io;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Some point based loyalty programs will pass on transaction information (can be used for segmenting, additional reporting, and/or showing transactions on back of the pass).
 *
 * Generated from protobuf message <code>io.Transaction</code>
 */
class Transaction extends \Google\Protobuf\Internal\Message
{
    /**
     * Reference ID is the ID used in the system where the transaction is coming from. Needs to be unique within the program.
     *
     * Generated from protobuf field <code>string referenceId = 1;</code>
     */
    protected $referenceId = '';
    /**
     * The total amount of all order items. Based on POS setting, the totalPrice can already include the tax amount
     *
     * Generated from protobuf field <code>float totalPrice = 2;</code>
     */
    protected $totalPrice = 0.0;
    /**
     * List of order items in the  transaction
     *
     * Generated from protobuf field <code>repeated .io.OrderItem orderItems = 3;</code>
     */
    private $orderItems;
    /**
     * The total discount amount
     *
     * Generated from protobuf field <code>float discount = 4;</code>
     */
    protected $discount = 0.0;
    /**
     * List of discount items
     *
     * Generated from protobuf field <code>repeated .io.DiscountItem discountItems = 5;</code>
     */
    private $discountItems;
    /**
     * The service charge amount
     *
     * Generated from protobuf field <code>float serviceCharge = 6;</code>
     */
    protected $serviceCharge = 0.0;
    /**
     * The tax amount.
     *
     * Generated from protobuf field <code>float totalTax = 7;</code>
     */
    protected $totalTax = 0.0;
    /**
     * The final price of the transaction: (total price + service charge + (totalTax: if POS settings set to tax exclusive)) - discount
     *
     * Generated from protobuf field <code>float finalPrice = 8;</code>
     */
    protected $finalPrice = 0.0;
    /**
     * Rounding difference
     *
     * Generated from protobuf field <code>float roundingDifference = 9;</code>
     */
    protected $roundingDifference = 0.0;
    /**
     * Indicates if this transaction is a refund
     *
     * Generated from protobuf field <code>bool isRefunded = 10;</code>
     */
    protected $isRefunded = false;
    /**
     * The transaction timestamp
     *
     * Generated from protobuf field <code>.io.Date timestamp = 11;</code>
     */
    protected $timestamp = null;
    /**
     * The transaction currency
     *
     * Generated from protobuf field <code>string currency = 12;</code>
     */
    protected $currency = '';
    /**
     * GPS details of check in
     *
     * Generated from protobuf field <code>.io.GPSLocation location = 13;</code>
     */
    protected $location = null;
    /**
     * 17 is reserved for transaction source (online, or restaurant code)
     *
     * Generated from protobuf field <code>string transactionSource = 14;</code>
     */
    protected $transactionSource = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $referenceId
     *           Reference ID is the ID used in the system where the transaction is coming from. Needs to be unique within the program.
     *     @type float $totalPrice
     *           The total amount of all order items. Based on POS setting, the totalPrice can already include the tax amount
     *     @type array<\Io\OrderItem>|\Google\Protobuf\Internal\RepeatedField $orderItems
     *           List of order items in the  transaction
     *     @type float $discount
     *           The total discount amount
     *     @type array<\Io\DiscountItem>|\Google\Protobuf\Internal\RepeatedField $discountItems
     *           List of discount items
     *     @type float $serviceCharge
     *           The service charge amount
     *     @type float $totalTax
     *           The tax amount.
     *     @type float $finalPrice
     *           The final price of the transaction: (total price + service charge + (totalTax: if POS settings set to tax exclusive)) - discount
     *     @type float $roundingDifference
     *           Rounding difference
     *     @type bool $isRefunded
     *           Indicates if this transaction is a refund
     *     @type \Io\Date $timestamp
     *           The transaction timestamp
     *     @type string $currency
     *           The transaction currency
     *     @type \Io\GPSLocation $location
     *           GPS details of check in
     *     @type string $transactionSource
     *           17 is reserved for transaction source (online, or restaurant code)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\Common\Transaction::initOnce();
        parent::__construct($data);
    }

    /**
     * Reference ID is the ID used in the system where the transaction is coming from. Needs to be unique within the program.
     *
     * Generated from protobuf field <code>string referenceId = 1;</code>
     * @return string
     */
    public function getReferenceId()
    {
        return $this->referenceId;
    }

    /**
     * Reference ID is the ID used in the system where the transaction is coming from. Needs to be unique within the program.
     *
     * Generated from protobuf field <code>string referenceId = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setReferenceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->referenceId = $var;

        return $this;
    }

    /**
     * The total amount of all order items. Based on POS setting, the totalPrice can already include the tax amount
     *
     * Generated from protobuf field <code>float totalPrice = 2;</code>
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->totalPrice;
    }

    /**
     * The total amount of all order items. Based on POS setting, the totalPrice can already include the tax amount
     *
     * Generated from protobuf field <code>float totalPrice = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setTotalPrice($var)
    {
        GPBUtil::checkFloat($var);
        $this->totalPrice = $var;

        return $this;
    }

    /**
     * List of order items in the  transaction
     *
     * Generated from protobuf field <code>repeated .io.OrderItem orderItems = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getOrderItems()
    {
        return $this->orderItems;
    }

    /**
     * List of order items in the  transaction
     *
     * Generated from protobuf field <code>repeated .io.OrderItem orderItems = 3;</code>
     * @param array<\Io\OrderItem>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setOrderItems($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Io\OrderItem::class);
        $this->orderItems = $arr;

        return $this;
    }

    /**
     * The total discount amount
     *
     * Generated from protobuf field <code>float discount = 4;</code>
     * @return float
     */
    public function getDiscount()
    {
        return $this->discount;
    }

    /**
     * The total discount amount
     *
     * Generated from protobuf field <code>float discount = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setDiscount($var)
    {
        GPBUtil::checkFloat($var);
        $this->discount = $var;

        return $this;
    }

    /**
     * List of discount items
     *
     * Generated from protobuf field <code>repeated .io.DiscountItem discountItems = 5;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getDiscountItems()
    {
        return $this->discountItems;
    }

    /**
     * List of discount items
     *
     * Generated from protobuf field <code>repeated .io.DiscountItem discountItems = 5;</code>
     * @param array<\Io\DiscountItem>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setDiscountItems($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Io\DiscountItem::class);
        $this->discountItems = $arr;

        return $this;
    }

    /**
     * The service charge amount
     *
     * Generated from protobuf field <code>float serviceCharge = 6;</code>
     * @return float
     */
    public function getServiceCharge()
    {
        return $this->serviceCharge;
    }

    /**
     * The service charge amount
     *
     * Generated from protobuf field <code>float serviceCharge = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setServiceCharge($var)
    {
        GPBUtil::checkFloat($var);
        $this->serviceCharge = $var;

        return $this;
    }

    /**
     * The tax amount.
     *
     * Generated from protobuf field <code>float totalTax = 7;</code>
     * @return float
     */
    public function getTotalTax()
    {
        return $this->totalTax;
    }

    /**
     * The tax amount.
     *
     * Generated from protobuf field <code>float totalTax = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setTotalTax($var)
    {
        GPBUtil::checkFloat($var);
        $this->totalTax = $var;

        return $this;
    }

    /**
     * The final price of the transaction: (total price + service charge + (totalTax: if POS settings set to tax exclusive)) - discount
     *
     * Generated from protobuf field <code>float finalPrice = 8;</code>
     * @return float
     */
    public function getFinalPrice()
    {
        return $this->finalPrice;
    }

    /**
     * The final price of the transaction: (total price + service charge + (totalTax: if POS settings set to tax exclusive)) - discount
     *
     * Generated from protobuf field <code>float finalPrice = 8;</code>
     * @param float $var
     * @return $this
     */
    public function setFinalPrice($var)
    {
        GPBUtil::checkFloat($var);
        $this->finalPrice = $var;

        return $this;
    }

    /**
     * Rounding difference
     *
     * Generated from protobuf field <code>float roundingDifference = 9;</code>
     * @return float
     */
    public function getRoundingDifference()
    {
        return $this->roundingDifference;
    }

    /**
     * Rounding difference
     *
     * Generated from protobuf field <code>float roundingDifference = 9;</code>
     * @param float $var
     * @return $this
     */
    public function setRoundingDifference($var)
    {
        GPBUtil::checkFloat($var);
        $this->roundingDifference = $var;

        return $this;
    }

    /**
     * Indicates if this transaction is a refund
     *
     * Generated from protobuf field <code>bool isRefunded = 10;</code>
     * @return bool
     */
    public function getIsRefunded()
    {
        return $this->isRefunded;
    }

    /**
     * Indicates if this transaction is a refund
     *
     * Generated from protobuf field <code>bool isRefunded = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsRefunded($var)
    {
        GPBUtil::checkBool($var);
        $this->isRefunded = $var;

        return $this;
    }

    /**
     * The transaction timestamp
     *
     * Generated from protobuf field <code>.io.Date timestamp = 11;</code>
     * @return \Io\Date|null
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    public function hasTimestamp()
    {
        return isset($this->timestamp);
    }

    public function clearTimestamp()
    {
        unset($this->timestamp);
    }

    /**
     * The transaction timestamp
     *
     * Generated from protobuf field <code>.io.Date timestamp = 11;</code>
     * @param \Io\Date $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Io\Date::class);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * The transaction currency
     *
     * Generated from protobuf field <code>string currency = 12;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * The transaction currency
     *
     * Generated from protobuf field <code>string currency = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     * GPS details of check in
     *
     * Generated from protobuf field <code>.io.GPSLocation location = 13;</code>
     * @return \Io\GPSLocation|null
     */
    public function getLocation()
    {
        return $this->location;
    }

    public function hasLocation()
    {
        return isset($this->location);
    }

    public function clearLocation()
    {
        unset($this->location);
    }

    /**
     * GPS details of check in
     *
     * Generated from protobuf field <code>.io.GPSLocation location = 13;</code>
     * @param \Io\GPSLocation $var
     * @return $this
     */
    public function setLocation($var)
    {
        GPBUtil::checkMessage($var, \Io\GPSLocation::class);
        $this->location = $var;

        return $this;
    }

    /**
     * 17 is reserved for transaction source (online, or restaurant code)
     *
     * Generated from protobuf field <code>string transactionSource = 14;</code>
     * @return string
     */
    public function getTransactionSource()
    {
        return $this->transactionSource;
    }

    /**
     * 17 is reserved for transaction source (online, or restaurant code)
     *
     * Generated from protobuf field <code>string transactionSource = 14;</code>
     * @param string $var
     * @return $this
     */
    public function setTransactionSource($var)
    {
        GPBUtil::checkString($var, True);
        $this->transactionSource = $var;

        return $this;
    }

}

