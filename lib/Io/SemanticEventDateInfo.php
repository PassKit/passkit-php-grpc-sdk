<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: io/common/semantics.proto

namespace Io;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>io.SemanticEventDateInfo</code>
 */
class SemanticEventDateInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * Date and time of the event.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp date = 1;</code>
     */
    protected $date = null;
    /**
     * Indicates whether the pass omit displaying the time label i.e. just show the date.
     *
     * Generated from protobuf field <code>bool ignoreTimeComponents = 2;</code>
     */
    protected $ignoreTimeComponents = false;
    /**
     * The time zone in which the event takes place.
     *
     * Generated from protobuf field <code>string time_zone = 3;</code>
     */
    protected $time_zone = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Timestamp $date
     *           Date and time of the event.
     *     @type bool $ignoreTimeComponents
     *           Indicates whether the pass omit displaying the time label i.e. just show the date.
     *     @type string $time_zone
     *           The time zone in which the event takes place.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Io\Common\Semantics::initOnce();
        parent::__construct($data);
    }

    /**
     * Date and time of the event.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp date = 1;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getDate()
    {
        return $this->date;
    }

    public function hasDate()
    {
        return isset($this->date);
    }

    public function clearDate()
    {
        unset($this->date);
    }

    /**
     * Date and time of the event.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp date = 1;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->date = $var;

        return $this;
    }

    /**
     * Indicates whether the pass omit displaying the time label i.e. just show the date.
     *
     * Generated from protobuf field <code>bool ignoreTimeComponents = 2;</code>
     * @return bool
     */
    public function getIgnoreTimeComponents()
    {
        return $this->ignoreTimeComponents;
    }

    /**
     * Indicates whether the pass omit displaying the time label i.e. just show the date.
     *
     * Generated from protobuf field <code>bool ignoreTimeComponents = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setIgnoreTimeComponents($var)
    {
        GPBUtil::checkBool($var);
        $this->ignoreTimeComponents = $var;

        return $this;
    }

    /**
     * The time zone in which the event takes place.
     *
     * Generated from protobuf field <code>string time_zone = 3;</code>
     * @return string
     */
    public function getTimeZone()
    {
        return $this->time_zone;
    }

    /**
     * The time zone in which the event takes place.
     *
     * Generated from protobuf field <code>string time_zone = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setTimeZone($var)
    {
        GPBUtil::checkString($var, True);
        $this->time_zone = $var;

        return $this;
    }

}

