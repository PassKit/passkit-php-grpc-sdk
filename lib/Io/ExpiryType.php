<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/common/expiry.proto

namespace Io;

use UnexpectedValueException;

/**
 * Options to manage the expiry date of the digital card.
 *
 * Protobuf type <code>io.ExpiryType</code>
 */
class ExpiryType
{
    /**
     * Please do not use this enum. This enum do not have any effect on expiry logic.
     *
     * Generated from protobuf enum <code>EXPIRE_NONE = 0;</code>
     */
    const EXPIRE_NONE = 0;
    /**
     * Expiry date is set with year, month and date. The expiry date will be based on your timezone. The digital card will expire at 23:59:59:59.99999 of set date in fixed timezone. The expiry date is the same for all cards.
     *
     * Generated from protobuf enum <code>EXPIRE_ON_FIXED_DATE = 1;</code>
     */
    const EXPIRE_ON_FIXED_DATE = 1;
    /**
     * The digital card expires after the number of days after the digital card issuing.
     *
     * Generated from protobuf enum <code>EXPIRE_AFTER_X_DAYS = 2;</code>
     */
    const EXPIRE_AFTER_X_DAYS = 2;
    /**
     * If you want to change expiry date for each digital card, you can use this expiry type. You can set expiry date and time in fixed timezone.
     *
     * Generated from protobuf enum <code>EXPIRE_ON_VARIABLE_DATE_TIME = 3;</code>
     */
    const EXPIRE_ON_VARIABLE_DATE_TIME = 3;
    /**
     * The digital card will set as NULL and the pass will not expire..
     *
     * Generated from protobuf enum <code>EXPIRE_SET_TO_NULL = 4;</code>
     */
    const EXPIRE_SET_TO_NULL = 4;

    private static $valueToName = [
        self::EXPIRE_NONE => 'EXPIRE_NONE',
        self::EXPIRE_ON_FIXED_DATE => 'EXPIRE_ON_FIXED_DATE',
        self::EXPIRE_AFTER_X_DAYS => 'EXPIRE_AFTER_X_DAYS',
        self::EXPIRE_ON_VARIABLE_DATE_TIME => 'EXPIRE_ON_VARIABLE_DATE_TIME',
        self::EXPIRE_SET_TO_NULL => 'EXPIRE_SET_TO_NULL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

